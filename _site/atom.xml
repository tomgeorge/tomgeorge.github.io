<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Tom George</title>
 <link href="http://tomgeorge.github.io/atom.xml" rel="self"/>
 <link href="http://tomgeorge.github.io/"/>
 <updated>2016-09-16T21:38:09-04:00</updated>
 <id>http://tomgeorge.github.io</id>
 <author>
   <name>Tom George</name>
   <email>tg82490@gmail.com</email>
 </author>

 
 <entry>
   <title>Beating a Dead Horse&#58  Setting up SSH on Debian in VirtualBox</title>
   <link href="http://tomgeorge.github.io/2015/02/02/setting-up-ssh/"/>
   <updated>2015-02-02T00:00:00-05:00</updated>
   <id>http://tomgeorge.github.io/2015/02/02/setting-up-ssh</id>
   <content type="html">&lt;p&gt;This is the first post in my “Beating a Dead Horse” series, where I make a tutorial on something that really doesn’t need another tutorial.&lt;/p&gt;

&lt;p&gt;The title says, “Setting up SSH on Debian in VirtualBox”, but the basic idea is the same everywhere.  I want to walk you through how I set up ssh public-key authentication on my VirtualBox dev server.  I also set up port forwarding, allowing me to access the server through the public internet, which I may cover in a later post.&lt;/p&gt;

&lt;p&gt;You will need &lt;code&gt;openssh-server&lt;/code&gt; on the remote machine.&lt;/p&gt;

&lt;h1 id=&quot;setting-up-ssh-keys&quot;&gt;Setting up ssh keys&lt;/h1&gt;

&lt;h3 id=&quot;generating-the-keys&quot;&gt;Generating the keys&lt;/h3&gt;

&lt;p&gt;Type the following into a shell on the machine you want to use to connect:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mkdir -p ~/.ssh&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ssh keygen -t rsa&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Or if you want a DSA key:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ssh keygen -t dsa&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;It asks you to give the key file a name and save it somewhere  (the default public/private key pair  is &lt;code&gt;~/.ssh/id_rsa&lt;/code&gt; and &lt;code&gt;~/.ssh/id_rsa.pub&lt;/code&gt;).  It also asks if you want to give your key a passphrase (you should).&lt;/p&gt;

&lt;p&gt;Change the permissions on your keys so that they are only writeable/readable by you:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;chmod 600 ~/.ssh/id_rsa*&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;authorizing-your-machine-to-communicate-with-the-remote-host&quot;&gt;Authorizing your machine to communicate with the remote host&lt;/h3&gt;

&lt;p&gt;You need to add your public key to a file called &lt;code&gt;authorized_keys&lt;/code&gt;.  This lets ssh know who to let connect.  You can use the &lt;code&gt;ssh-copy-id&lt;/code&gt; command to do this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ssh-agent bash &amp;lt;your PRIVATE key file&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;It will ask for a password.&lt;/p&gt;

&lt;p&gt;Then:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ssh-copy-id user@host&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You should be able to access the remote machine now without a password.&lt;/p&gt;

&lt;h3 id=&quot;disabling-passphrase-authentication-and-changing-the-default-port&quot;&gt;Disabling passphrase authentication and changing the default port&lt;/h3&gt;

&lt;p&gt;I also disabled passphrase authentication on my machine and changed the default port sshd listens on.  You can make a case that changing the default port doesn’t really do anything to further secure yourself, but I figure why not take all practical steps.  It’s not that hard.&lt;/p&gt;

&lt;p&gt;The config files for the ssh server live in &lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt; on the remote machine.  Open up the &lt;code&gt;sshd_config&lt;/code&gt; file (you probably have to use &lt;code&gt;sudo&lt;/code&gt;) in an editor and uncomment the line:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;#PasswordAuthentication no&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Also, make sure this line is uncommented&lt;/p&gt;

&lt;p&gt;&lt;code&gt;#PermitRootLogin no&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If the line doesn’t exist, make it.&lt;/p&gt;

&lt;p&gt;Optionally change the Port in the same file. If you do this, it might be a good idea to change the port value in &lt;code&gt;ssh_config&lt;/code&gt; on the machine you use to connect as well.  This saves you from having to specify the port every time with &lt;code&gt;ssh -p&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To see the impact of these changes, restart ssh on the remote machine:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo service ssh restart&lt;/code&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>First Post</title>
   <link href="http://tomgeorge.github.io/2015/01/06/first-post/"/>
   <updated>2015-01-06T00:00:00-05:00</updated>
   <id>http://tomgeorge.github.io/2015/01/06/first-post</id>
   <content type="html">&lt;p&gt;This is my first post.  I’m mostly going to be talking about programming (I like &lt;a href=&quot;http://clojure.org&quot;&gt;Clojure&lt;/a&gt;), and doing programming challenges.&lt;/p&gt;

&lt;p&gt;I’m a software developer at &lt;a href=&quot;http://www.paychex.com&quot;&gt;Paychex&lt;/a&gt; in frigid Rochester, NY.  I work in a whole bunch of technologies, including C, Java, and .NET.  I work mostly in the back end on our money transmission and filing infrastructure.&lt;/p&gt;
</content>
 </entry>
 

</feed>
